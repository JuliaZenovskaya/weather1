{
  "{\"sourceRoot\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\\\\test\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\",\"filename\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\\\\test\\\\test.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\",\"plugins\":[],\"presets\":[]}:7.6.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Jully\\WeatherLab1\\test",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\Jully\\WeatherLab1",
      "filename": "C:\\Users\\Jully\\WeatherLab1\\test\\test.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Jully\\WeatherLab1",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Jully\\WeatherLab1\\test\\test.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Jully\\WeatherLab1\\test\\test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Jully\\WeatherLab1\\test",
        "sourceFileName": "test.js"
      }
    },
    "ast": null,
    "code": "const {\n  extractForecast,\n  extractErrorMessage,\n  getMyWeather\n} = require('../script');\n\ndescribe('Request', () => {\n  it('check when city exists', () => {\n    const city = 'Moscow';\n    const expect = 200;\n    const real = getMyWeather(city, false);\n\n    if (!expect === real) {\n      throw new Error(`Expected ${expect}, but got ${real}:`);\n    } else {\n      console.log(\"OK:\");\n    }\n  });\n  it('check when city does not exist', () => {\n    const city = 'hhh';\n    const expect = 404;\n    const real = getMyWeather(city, false);\n\n    if (!expect === real) {\n      throw new Error('Expected ' + expect + ', but got ' + real + \":\");\n    } else {\n      console.log(\"OK:\");\n    }\n  });\n});\ndescribe('Getting data from response', () => {\n  it('get from response with existing city', () => {\n    const response = {\n      \"coord\": {\n        \"lon\": 37.62,\n        \"lat\": 55.75\n      },\n      \"weather\": [{\n        \"id\": 701,\n        \"main\": \"Mist\",\n        \"description\": \"mist\",\n        \"icon\": \"50n\"\n      }],\n      \"base\": \"stations\",\n      \"main\": {\n        \"temp\": 4.38,\n        \"pressure\": 1015,\n        \"humidity\": 100,\n        \"temp_min\": 2,\n        \"temp_max\": 5.56\n      },\n      \"visibility\": 3000,\n      \"wind\": {\n        \"speed\": 4,\n        \"deg\": 90\n      },\n      \"clouds\": {\n        \"all\": 90\n      },\n      \"dt\": 1573170827,\n      \"sys\": {\n        \"type\": 1,\n        \"id\": 9027,\n        \"country\": \"RU\",\n        \"sunrise\": 1573188558,\n        \"sunset\": 1573220232\n      },\n      \"timezone\": 10800,\n      \"id\": 524901,\n      \"name\": \"Moscow\",\n      \"cod\": 200\n    };\n    const expect = {\n      \"city\": \"Weather in Moscow is \",\n      \"main\": \"mist\",\n      \"parameters\": [{\n        \"type\": \"Temperature\",\n        \"value\": 4.38,\n        \"units\": \"&deg;C\"\n      }, {\n        \"type\": \"Pressure\",\n        \"value\": 1015,\n        \"units\": \"hPa\"\n      }, {\n        \"type\": \"Wind speed\",\n        \"value\": 4,\n        \"units\": \"m/s\"\n      }, {\n        \"type\": \"Humidity\",\n        \"value\": 100,\n        \"units\": \"%\"\n      }, {\n        \"type\": \"Clouds\",\n        \"value\": 90,\n        \"units\": \"%\"\n      }, {\n        \"type\": \"Visibility\",\n        \"value\": 3000,\n        \"units\": \"m\"\n      }]\n    };\n    const real = extractForecast(response);\n\n    if (!real === expect) {\n      throw new Error('Expected ' + expect + ', but got ' + real + ':');\n    } else {\n      console.log('OK:');\n    }\n  });\n  it('get from response with not existing city', () => {\n    const response = {\n      \"cod\": \"404\",\n      \"message\": \"city not found\"\n    };\n    const expect = {\n      \"message\": \"city not found\"\n    };\n    const real = extractErrorMessage(response);\n\n    if (!real === expect) {\n      throw new Error('Expected ' + expect + ', but got ' + real + ':');\n    } else {\n      console.log('OK:');\n    }\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QuanMiXSwibmFtZXMiOlsiZXh0cmFjdEZvcmVjYXN0IiwiZXh0cmFjdEVycm9yTWVzc2FnZSIsImdldE15V2VhdGhlciIsInJlcXVpcmUiLCJkZXNjcmliZSIsIml0IiwiY2l0eSIsImV4cGVjdCIsInJlYWwiLCJFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSJdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTTtBQUFFQSxFQUFBQSxlQUFGO0FBQW1CQyxFQUFBQSxtQkFBbkI7QUFBd0NDLEVBQUFBO0FBQXhDLElBQXlEQyxPQUFPLENBQUMsV0FBRCxDQUF0RTs7QUFFQUMsUUFBUSxDQUFDLFNBQUQsRUFBWSxNQUFNO0FBQ3hCQyxFQUFBQSxFQUFFLENBQUMsd0JBQUQsRUFBMkIsTUFBTTtBQUNqQyxVQUFNQyxJQUFJLEdBQUcsUUFBYjtBQUNBLFVBQU1DLE1BQU0sR0FBRyxHQUFmO0FBQ0EsVUFBTUMsSUFBSSxHQUFHTixZQUFZLENBQUNJLElBQUQsRUFBTyxLQUFQLENBQXpCOztBQUNBLFFBQUksQ0FBQ0MsTUFBRCxLQUFVQyxJQUFkLEVBQW9CO0FBQ2xCLFlBQU0sSUFBSUMsS0FBSixDQUFXLFlBQVdGLE1BQU8sYUFBWUMsSUFBSyxHQUE5QyxDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0xFLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQVo7QUFDRDtBQUNBLEdBVEQsQ0FBRjtBQVdBTixFQUFBQSxFQUFFLENBQUUsZ0NBQUYsRUFBb0MsTUFBTTtBQUMxQyxVQUFNQyxJQUFJLEdBQUcsS0FBYjtBQUNBLFVBQU1DLE1BQU0sR0FBRyxHQUFmO0FBQ0EsVUFBTUMsSUFBSSxHQUFHTixZQUFZLENBQUNJLElBQUQsRUFBTyxLQUFQLENBQXpCOztBQUNBLFFBQUksQ0FBQ0MsTUFBRCxLQUFVQyxJQUFkLEVBQW1CO0FBQ2pCLFlBQU0sSUFBSUMsS0FBSixDQUFVLGNBQWNGLE1BQWQsR0FBdUIsWUFBdkIsR0FBc0NDLElBQXRDLEdBQTZDLEdBQXZELENBQU47QUFDRCxLQUZELE1BRU87QUFDTEUsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksS0FBWjtBQUNEO0FBQ0YsR0FUQyxDQUFGO0FBVUQsQ0F0Qk8sQ0FBUjtBQXdCQVAsUUFBUSxDQUFDLDRCQUFELEVBQStCLE1BQU07QUFDM0NDLEVBQUFBLEVBQUUsQ0FBQyxzQ0FBRCxFQUF5QyxNQUFNO0FBQy9DLFVBQU1PLFFBQVEsR0FBRztBQUNmLGVBQVE7QUFBQyxlQUFNLEtBQVA7QUFBYSxlQUFNO0FBQW5CLE9BRE87QUFFZixpQkFBVSxDQUFDO0FBQUMsY0FBSyxHQUFOO0FBQVUsZ0JBQU8sTUFBakI7QUFBd0IsdUJBQWMsTUFBdEM7QUFBNkMsZ0JBQU87QUFBcEQsT0FBRCxDQUZLO0FBR2YsY0FBTyxVQUhRO0FBSWYsY0FBTztBQUFDLGdCQUFPLElBQVI7QUFBYSxvQkFBVyxJQUF4QjtBQUE2QixvQkFBVyxHQUF4QztBQUE0QyxvQkFBVyxDQUF2RDtBQUF5RCxvQkFBVztBQUFwRSxPQUpRO0FBS2Ysb0JBQWEsSUFMRTtBQU1mLGNBQU87QUFBQyxpQkFBUSxDQUFUO0FBQVcsZUFBTTtBQUFqQixPQU5RO0FBT2YsZ0JBQVM7QUFBQyxlQUFNO0FBQVAsT0FQTTtBQVFmLFlBQUssVUFSVTtBQVNmLGFBQU07QUFBQyxnQkFBTyxDQUFSO0FBQVUsY0FBSyxJQUFmO0FBQW9CLG1CQUFVLElBQTlCO0FBQW1DLG1CQUFVLFVBQTdDO0FBQXdELGtCQUFTO0FBQWpFLE9BVFM7QUFVZixrQkFBVyxLQVZJO0FBV2YsWUFBSyxNQVhVO0FBWWYsY0FBTyxRQVpRO0FBYWYsYUFBTTtBQWJTLEtBQWpCO0FBZ0JBLFVBQU1MLE1BQU0sR0FBRztBQUNiLGNBQVEsdUJBREs7QUFFYixjQUFRLE1BRks7QUFHYixvQkFDSSxDQUNJO0FBQUUsZ0JBQVEsYUFBVjtBQUF5QixpQkFBUyxJQUFsQztBQUF3QyxpQkFBUztBQUFqRCxPQURKLEVBRUk7QUFBRSxnQkFBUSxVQUFWO0FBQXNCLGlCQUFTLElBQS9CO0FBQXFDLGlCQUFTO0FBQTlDLE9BRkosRUFHSTtBQUFFLGdCQUFRLFlBQVY7QUFBd0IsaUJBQVMsQ0FBakM7QUFBb0MsaUJBQVM7QUFBN0MsT0FISixFQUlJO0FBQUUsZ0JBQVEsVUFBVjtBQUFzQixpQkFBUyxHQUEvQjtBQUFvQyxpQkFBUztBQUE3QyxPQUpKLEVBS0k7QUFBRSxnQkFBUSxRQUFWO0FBQW9CLGlCQUFTLEVBQTdCO0FBQWlDLGlCQUFTO0FBQTFDLE9BTEosRUFNSTtBQUFFLGdCQUFRLFlBQVY7QUFBd0IsaUJBQVMsSUFBakM7QUFBdUMsaUJBQVM7QUFBaEQsT0FOSjtBQUpTLEtBQWY7QUFjRSxVQUFNQyxJQUFJLEdBQUdSLGVBQWUsQ0FBQ1ksUUFBRCxDQUE1Qjs7QUFDQSxRQUFJLENBQUNKLElBQUQsS0FBUUQsTUFBWixFQUFvQjtBQUNsQixZQUFNLElBQUlFLEtBQUosQ0FBVSxjQUFjRixNQUFkLEdBQXVCLFlBQXZCLEdBQXNDQyxJQUF0QyxHQUE2QyxHQUF2RCxDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0xFLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQVo7QUFDRDtBQUNKLEdBckNDLENBQUY7QUF1Q0FOLEVBQUFBLEVBQUUsQ0FBQywwQ0FBRCxFQUE2QyxNQUFNO0FBQ25ELFVBQU1PLFFBQVEsR0FBRztBQUNmLGFBQU0sS0FEUztBQUVmLGlCQUFVO0FBRkssS0FBakI7QUFJQSxVQUFNTCxNQUFNLEdBQUc7QUFDYixpQkFBVTtBQURHLEtBQWY7QUFJQSxVQUFNQyxJQUFJLEdBQUdQLG1CQUFtQixDQUFDVyxRQUFELENBQWhDOztBQUNBLFFBQUksQ0FBQ0osSUFBRCxLQUFRRCxNQUFaLEVBQW9CO0FBQ2xCLFlBQU0sSUFBSUUsS0FBSixDQUFVLGNBQWNGLE1BQWQsR0FBdUIsWUFBdkIsR0FBc0NDLElBQXRDLEdBQTZDLEdBQXZELENBQU47QUFDRCxLQUZELE1BRU87QUFDTEUsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksS0FBWjtBQUNEO0FBRUYsR0FoQkMsQ0FBRjtBQWlCRCxDQXpETyxDQUFSIiwic291cmNlUm9vdCI6IkM6XFxVc2Vyc1xcSnVsbHlcXFdlYXRoZXJMYWIxXFx0ZXN0Iiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNvbnN0IHsgZXh0cmFjdEZvcmVjYXN0LCBleHRyYWN0RXJyb3JNZXNzYWdlLCBnZXRNeVdlYXRoZXIgfSA9IHJlcXVpcmUoJy4uL3NjcmlwdCcpO1xyXG5cclxuZGVzY3JpYmUoJ1JlcXVlc3QnLCAoKSA9PiB7XHJcbiAgaXQoJ2NoZWNrIHdoZW4gY2l0eSBleGlzdHMnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjaXR5ID0gJ01vc2Nvdyc7XHJcbiAgICBjb25zdCBleHBlY3QgPSAyMDA7XHJcbiAgICBjb25zdCByZWFsID0gZ2V0TXlXZWF0aGVyKGNpdHksIGZhbHNlKTtcclxuICAgIGlmICghZXhwZWN0PT09cmVhbCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkICR7ZXhwZWN0fSwgYnV0IGdvdCAke3JlYWx9OmApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCJPSzpcIik7XHJcbiAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgaXQgKCdjaGVjayB3aGVuIGNpdHkgZG9lcyBub3QgZXhpc3QnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjaXR5ID0gJ2hoaCc7XHJcbiAgICBjb25zdCBleHBlY3QgPSA0MDQ7XHJcbiAgICBjb25zdCByZWFsID0gZ2V0TXlXZWF0aGVyKGNpdHksIGZhbHNlKTtcclxuICAgIGlmICghZXhwZWN0PT09cmVhbCl7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgJyArIGV4cGVjdCArICcsIGJ1dCBnb3QgJyArIHJlYWwgKyBcIjpcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIk9LOlwiKTtcclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnR2V0dGluZyBkYXRhIGZyb20gcmVzcG9uc2UnLCAoKSA9PiB7XHJcbiAgaXQoJ2dldCBmcm9tIHJlc3BvbnNlIHdpdGggZXhpc3RpbmcgY2l0eScsICgpID0+IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xyXG4gICAgICBcImNvb3JkXCI6e1wibG9uXCI6MzcuNjIsXCJsYXRcIjo1NS43NX0sXHJcbiAgICAgIFwid2VhdGhlclwiOlt7XCJpZFwiOjcwMSxcIm1haW5cIjpcIk1pc3RcIixcImRlc2NyaXB0aW9uXCI6XCJtaXN0XCIsXCJpY29uXCI6XCI1MG5cIn1dLFxyXG4gICAgICBcImJhc2VcIjpcInN0YXRpb25zXCIsXHJcbiAgICAgIFwibWFpblwiOntcInRlbXBcIjo0LjM4LFwicHJlc3N1cmVcIjoxMDE1LFwiaHVtaWRpdHlcIjoxMDAsXCJ0ZW1wX21pblwiOjIsXCJ0ZW1wX21heFwiOjUuNTZ9LFxyXG4gICAgICBcInZpc2liaWxpdHlcIjozMDAwLFxyXG4gICAgICBcIndpbmRcIjp7XCJzcGVlZFwiOjQsXCJkZWdcIjo5MH0sXHJcbiAgICAgIFwiY2xvdWRzXCI6e1wiYWxsXCI6OTB9LFxyXG4gICAgICBcImR0XCI6MTU3MzE3MDgyNyxcclxuICAgICAgXCJzeXNcIjp7XCJ0eXBlXCI6MSxcImlkXCI6OTAyNyxcImNvdW50cnlcIjpcIlJVXCIsXCJzdW5yaXNlXCI6MTU3MzE4ODU1OCxcInN1bnNldFwiOjE1NzMyMjAyMzJ9LFxyXG4gICAgICBcInRpbWV6b25lXCI6MTA4MDAsXHJcbiAgICAgIFwiaWRcIjo1MjQ5MDEsXHJcbiAgICAgIFwibmFtZVwiOlwiTW9zY293XCIsXHJcbiAgICAgIFwiY29kXCI6MjAwXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGV4cGVjdCA9IHtcclxuICAgICAgXCJjaXR5XCI6IFwiV2VhdGhlciBpbiBNb3Njb3cgaXMgXCIsXHJcbiAgICAgIFwibWFpblwiOiBcIm1pc3RcIixcclxuICAgICAgXCJwYXJhbWV0ZXJzXCI6XHJcbiAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgeyBcInR5cGVcIjogXCJUZW1wZXJhdHVyZVwiLCBcInZhbHVlXCI6IDQuMzgsIFwidW5pdHNcIjogXCImZGVnO0NcIn0sXHJcbiAgICAgICAgICAgICAgeyBcInR5cGVcIjogXCJQcmVzc3VyZVwiLCBcInZhbHVlXCI6IDEwMTUsIFwidW5pdHNcIjogXCJoUGFcIn0sXHJcbiAgICAgICAgICAgICAgeyBcInR5cGVcIjogXCJXaW5kIHNwZWVkXCIsIFwidmFsdWVcIjogNCwgXCJ1bml0c1wiOiBcIm0vc1wifSxcclxuICAgICAgICAgICAgICB7IFwidHlwZVwiOiBcIkh1bWlkaXR5XCIsIFwidmFsdWVcIjogMTAwLCBcInVuaXRzXCI6IFwiJVwifSxcclxuICAgICAgICAgICAgICB7IFwidHlwZVwiOiBcIkNsb3Vkc1wiLCBcInZhbHVlXCI6IDkwLCBcInVuaXRzXCI6IFwiJVwifSxcclxuICAgICAgICAgICAgICB7IFwidHlwZVwiOiBcIlZpc2liaWxpdHlcIiwgXCJ2YWx1ZVwiOiAzMDAwLCBcInVuaXRzXCI6IFwibVwifSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCByZWFsID0gZXh0cmFjdEZvcmVjYXN0KHJlc3BvbnNlKTtcclxuICAgICAgaWYgKCFyZWFsPT09ZXhwZWN0KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCAnICsgZXhwZWN0ICsgJywgYnV0IGdvdCAnICsgcmVhbCArICc6Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ09LOicpO1xyXG4gICAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdnZXQgZnJvbSByZXNwb25zZSB3aXRoIG5vdCBleGlzdGluZyBjaXR5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgIFwiY29kXCI6XCI0MDRcIixcclxuICAgICAgXCJtZXNzYWdlXCI6XCJjaXR5IG5vdCBmb3VuZFwiXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZXhwZWN0ID0ge1xyXG4gICAgICBcIm1lc3NhZ2VcIjpcImNpdHkgbm90IGZvdW5kXCJcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVhbCA9IGV4dHJhY3RFcnJvck1lc3NhZ2UocmVzcG9uc2UpO1xyXG4gICAgaWYgKCFyZWFsPT09ZXhwZWN0KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgJyArIGV4cGVjdCArICcsIGJ1dCBnb3QgJyArIHJlYWwgKyAnOicpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJ09LOicpO1xyXG4gICAgfVxyXG5cclxuICB9KTtcclxufSk7XHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test.js"
      ],
      "names": [
        "extractForecast",
        "extractErrorMessage",
        "getMyWeather",
        "require",
        "describe",
        "it",
        "city",
        "expect",
        "real",
        "Error",
        "console",
        "log",
        "response"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\Jully\\WeatherLab1\\test",
      "sourcesContent": [
        "\r\nconst { extractForecast, extractErrorMessage, getMyWeather } = require('../script');\r\n\r\ndescribe('Request', () => {\r\n  it('check when city exists', () => {\r\n    const city = 'Moscow';\r\n    const expect = 200;\r\n    const real = getMyWeather(city, false);\r\n    if (!expect===real) {\r\n      throw new Error(`Expected ${expect}, but got ${real}:`);\r\n    } else {\r\n      console.log(\"OK:\");\r\n    }\r\n    });\r\n\r\n  it ('check when city does not exist', () => {\r\n    const city = 'hhh';\r\n    const expect = 404;\r\n    const real = getMyWeather(city, false);\r\n    if (!expect===real){\r\n      throw new Error('Expected ' + expect + ', but got ' + real + \":\");\r\n    } else {\r\n      console.log(\"OK:\");\r\n    }\r\n  });\r\n});\r\n\r\ndescribe('Getting data from response', () => {\r\n  it('get from response with existing city', () => {\r\n    const response = {\r\n      \"coord\":{\"lon\":37.62,\"lat\":55.75},\r\n      \"weather\":[{\"id\":701,\"main\":\"Mist\",\"description\":\"mist\",\"icon\":\"50n\"}],\r\n      \"base\":\"stations\",\r\n      \"main\":{\"temp\":4.38,\"pressure\":1015,\"humidity\":100,\"temp_min\":2,\"temp_max\":5.56},\r\n      \"visibility\":3000,\r\n      \"wind\":{\"speed\":4,\"deg\":90},\r\n      \"clouds\":{\"all\":90},\r\n      \"dt\":1573170827,\r\n      \"sys\":{\"type\":1,\"id\":9027,\"country\":\"RU\",\"sunrise\":1573188558,\"sunset\":1573220232},\r\n      \"timezone\":10800,\r\n      \"id\":524901,\r\n      \"name\":\"Moscow\",\r\n      \"cod\":200\r\n    };\r\n\r\n    const expect = {\r\n      \"city\": \"Weather in Moscow is \",\r\n      \"main\": \"mist\",\r\n      \"parameters\":\r\n          [\r\n              { \"type\": \"Temperature\", \"value\": 4.38, \"units\": \"&deg;C\"},\r\n              { \"type\": \"Pressure\", \"value\": 1015, \"units\": \"hPa\"},\r\n              { \"type\": \"Wind speed\", \"value\": 4, \"units\": \"m/s\"},\r\n              { \"type\": \"Humidity\", \"value\": 100, \"units\": \"%\"},\r\n              { \"type\": \"Clouds\", \"value\": 90, \"units\": \"%\"},\r\n              { \"type\": \"Visibility\", \"value\": 3000, \"units\": \"m\"},\r\n          ],\r\n      };\r\n\r\n      const real = extractForecast(response);\r\n      if (!real===expect) {\r\n        throw new Error('Expected ' + expect + ', but got ' + real + ':');\r\n      } else {\r\n        console.log('OK:');\r\n      }\r\n  });\r\n\r\n  it('get from response with not existing city', () => {\r\n    const response = {\r\n      \"cod\":\"404\",\r\n      \"message\":\"city not found\"\r\n    };\r\n    const expect = {\r\n      \"message\":\"city not found\"\r\n    };\r\n\r\n    const real = extractErrorMessage(response);\r\n    if (!real===expect) {\r\n      throw new Error('Expected ' + expect + ', but got ' + real + ':');\r\n    } else {\r\n      console.log('OK:');\r\n    }\r\n\r\n  });\r\n});\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1573751171830
  },
  "{\"sourceRoot\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\",\"filename\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\\\\script.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Jully\\\\WeatherLab1\",\"plugins\":[],\"presets\":[]}:7.6.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Jully\\WeatherLab1",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\Jully\\WeatherLab1",
      "filename": "C:\\Users\\Jully\\WeatherLab1\\script.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Jully\\WeatherLab1",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Jully\\WeatherLab1\\script.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Jully\\WeatherLab1\\script.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Jully\\WeatherLab1",
        "sourceFileName": "script.js"
      }
    },
    "ast": null,
    "code": "function OnSubmitListener() {\n  let city = document.getElementById(\"input-field\").value;\n  getMyWeather(city, true);\n}\n\nfunction getMyWeather(city, br) {\n  let request;\n\n  if (br == true) {\n    request = new XMLHttpRequest();\n  } else {\n    let XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\n\n    request = new XMLHttpRequest();\n  }\n\n  let requestURL = \"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&appid=e972dcd233bab1ebce419c370711921f&units=metric&lang=en\";\n  request.open(\"GET\", requestURL);\n  request.responseType = \"json\";\n\n  request.onload = function () {\n    if (request.status == 200) {\n      existingCity(request.response);\n      return request.status;\n    } else {\n      notExistingCity(request.response);\n      return request.status;\n    }\n  };\n\n  request.send();\n}\n\nfunction existingCity(response) {\n  let data = extractForecast(response);\n  displayWeather(data);\n  displayErrorMessage(null);\n}\n\nfunction notExistingCity(response) {\n  let data = extractErrorMessage(response);\n  displayErrorMessage(data);\n  displayWeather(null);\n}\n\nfunction displayErrorMessage(message) {\n  let source = document.getElementById(\"message-template\").innerHTML;\n  let template = Handlebars.compile(source);\n  let html = template(message);\n  document.getElementById(\"message-container\").innerHTML = html;\n}\n\nfunction displayWeather(forecast) {\n  let source = document.getElementById(\"weather-template\").innerHTML;\n  let template = Handlebars.compile(source);\n  let html = template(forecast);\n  document.getElementById(\"weather-container\").innerHTML = html;\n}\n\nfunction extractErrorMessage(response) {\n  let message = {\n    message: response.message\n  };\n  return message;\n}\n\nfunction extractForecast(response) {\n  let forecast = {\n    city: \"Weather in \" + response.name + \" is \",\n    main: response.weather[0].description,\n    parameters: [{\n      type: \"Temperature\",\n      value: response.main.temp,\n      units: \"&deg;C\"\n    }, {\n      type: \"Pressure\",\n      value: response.main.pressure,\n      units: \"hPa\"\n    }, {\n      type: \"Wind speed\",\n      value: response.wind.speed,\n      units: \"m/s\"\n    }, {\n      type: \"Humidity\",\n      value: response.main.humidity,\n      units: \"%\"\n    }, {\n      type: \"Clouds\",\n      value: response.clouds.all,\n      units: \"%\"\n    }, {\n      type: \"Visibility\",\n      value: response.visibility,\n      units: \"m\"\n    }]\n  };\n  return forecast;\n}\n\nexports.extractForecast = extractForecast;\nexports.extractErrorMessage = extractErrorMessage;\nexports.getMyWeather = getMyWeather;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "script.js"
      ],
      "names": [
        "OnSubmitListener",
        "city",
        "document",
        "getElementById",
        "value",
        "getMyWeather",
        "br",
        "request",
        "XMLHttpRequest",
        "require",
        "requestURL",
        "open",
        "responseType",
        "onload",
        "status",
        "existingCity",
        "response",
        "notExistingCity",
        "send",
        "data",
        "extractForecast",
        "displayWeather",
        "displayErrorMessage",
        "extractErrorMessage",
        "message",
        "source",
        "innerHTML",
        "template",
        "Handlebars",
        "compile",
        "html",
        "forecast",
        "name",
        "main",
        "weather",
        "description",
        "parameters",
        "type",
        "temp",
        "units",
        "pressure",
        "wind",
        "speed",
        "humidity",
        "clouds",
        "all",
        "visibility",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\Jully\\WeatherLab1",
      "sourcesContent": [
        "\r\n  function OnSubmitListener() {\r\n    let city = document.getElementById(\"input-field\").value;\r\n    getMyWeather(city, true);\r\n}\r\n\r\nfunction getMyWeather(city, br) {\r\n  let request;\r\n  if (br == true) {\r\n    request = new XMLHttpRequest();\r\n  } else {\r\n    let XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\r\n    request = new XMLHttpRequest();\r\n  }\r\n\r\n  let requestURL = \"https://api.openweathermap.org/data/2.5/weather?q=\"\r\n      + city +\r\n      \"&appid=e972dcd233bab1ebce419c370711921f&units=metric&lang=en\";\r\n      request.open(\"GET\", requestURL);\r\n      request.responseType = \"json\";\r\n\r\n      request.onload = function () {\r\n        if (request.status == 200) {\r\n          existingCity(request.response);\r\n          return request.status;\r\n        } else {\r\n          notExistingCity(request.response);\r\n          return request.status;\r\n        }\r\n      }\r\n      request.send();\r\n}\r\n\r\nfunction existingCity(response) {\r\n  let data = extractForecast(response);\r\n  displayWeather(data);\r\n  displayErrorMessage(null);\r\n}\r\n\r\nfunction notExistingCity(response) {\r\n  let data = extractErrorMessage(response);\r\n  displayErrorMessage(data);\r\n  displayWeather(null);\r\n}\r\n\r\nfunction displayErrorMessage(message) {\r\n  let source = document.getElementById(\"message-template\").innerHTML;\r\n  let template = Handlebars.compile(source);\r\n\r\n  let html = template(message);\r\n  document.getElementById(\"message-container\").innerHTML = html;\r\n}\r\n\r\nfunction displayWeather(forecast) {\r\n    let source = document.getElementById(\"weather-template\").innerHTML;\r\n    let template = Handlebars.compile(source);\r\n\r\n    let html = template(forecast);\r\n    document.getElementById(\"weather-container\").innerHTML = html;\r\n}\r\n\r\nfunction extractErrorMessage(response) {\r\n  let message = {\r\n    message: response.message,\r\n  }\r\n  return message;\r\n}\r\n\r\nfunction extractForecast(response) {\r\n\r\n\r\n    let forecast = {\r\n        city: \"Weather in \" + response.name + \" is \",\r\n        main: response.weather[0].description,\r\n        parameters:\r\n            [\r\n                { type: \"Temperature\", value: response.main.temp, units: \"&deg;C\"},\r\n                { type: \"Pressure\", value: response.main.pressure, units: \"hPa\"},\r\n                { type: \"Wind speed\", value: response.wind.speed, units: \"m/s\"},\r\n                { type: \"Humidity\", value: response.main.humidity, units: \"%\"},\r\n                { type: \"Clouds\", value: response.clouds.all, units: \"%\"},\r\n                { type: \"Visibility\", value: response.visibility, units: \"m\"},\r\n            ],\r\n    };\r\n    return forecast;\r\n}\r\n\r\nexports.extractForecast = extractForecast;\r\nexports.extractErrorMessage = extractErrorMessage;\r\nexports.getMyWeather = getMyWeather;\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1573751171830
  }
}